// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	order "github.com/karta0898098/mome/pkg/order"
	mock "github.com/stretchr/testify/mock"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// SubmitOrder provides a mock function with given fields: ctx, _a1
func (_m *MockProvider) SubmitOrder(ctx context.Context, _a1 order.Order) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, order.Order) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_SubmitOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitOrder'
type MockProvider_SubmitOrder_Call struct {
	*mock.Call
}

// SubmitOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 order.Order
func (_e *MockProvider_Expecter) SubmitOrder(ctx interface{}, _a1 interface{}) *MockProvider_SubmitOrder_Call {
	return &MockProvider_SubmitOrder_Call{Call: _e.mock.On("SubmitOrder", ctx, _a1)}
}

func (_c *MockProvider_SubmitOrder_Call) Run(run func(ctx context.Context, _a1 order.Order)) *MockProvider_SubmitOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(order.Order))
	})
	return _c
}

func (_c *MockProvider_SubmitOrder_Call) Return(err error) *MockProvider_SubmitOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProvider_SubmitOrder_Call) RunAndReturn(run func(context.Context, order.Order) error) *MockProvider_SubmitOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
