// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	order "github.com/karta0898098/mome/pkg/order"
	mock "github.com/stretchr/testify/mock"
)

// MockComparator is an autogenerated mock type for the Comparator type
type MockComparator struct {
	mock.Mock
}

type MockComparator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComparator) EXPECT() *MockComparator_Expecter {
	return &MockComparator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: x, y
func (_m *MockComparator) Execute(x order.OrderTracker, y order.OrderTracker) bool {
	ret := _m.Called(x, y)

	var r0 bool
	if rf, ok := ret.Get(0).(func(order.OrderTracker, order.OrderTracker) bool); ok {
		r0 = rf(x, y)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockComparator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockComparator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - x order.OrderTracker
//   - y order.OrderTracker
func (_e *MockComparator_Expecter) Execute(x interface{}, y interface{}) *MockComparator_Execute_Call {
	return &MockComparator_Execute_Call{Call: _e.mock.On("Execute", x, y)}
}

func (_c *MockComparator_Execute_Call) Run(run func(x order.OrderTracker, y order.OrderTracker)) *MockComparator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(order.OrderTracker), args[1].(order.OrderTracker))
	})
	return _c
}

func (_c *MockComparator_Execute_Call) Return(_a0 bool) *MockComparator_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComparator_Execute_Call) RunAndReturn(run func(order.OrderTracker, order.OrderTracker) bool) *MockComparator_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComparator creates a new instance of MockComparator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComparator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComparator {
	mock := &MockComparator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
