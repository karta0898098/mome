syntax = "proto3";

option go_package = ".;order";

package order;

// OrderMatchingService define order matching service method
service OrderMatchingService{
    // Submit order to order matching engine
    // Trade history will send by MQ when successful matching
    rpc SubmitOrder(SubmitOrderRequest) returns (SubmitOrderReply){}

    // List all asks orders include Limit and Market orders
    rpc ListAllAsks(ListAllAsksRequest) returns (ListAllAskReply){}

    // List all bids orders include Limit and Market orders
    rpc ListAllBids(ListAllBidsRequest) returns (ListAllBidsReply){}
}

// OrderParams is enum of order params
enum OrderParams{
    ORDER_PARAMS_UNKNOWN = 0;
    ORDER_PARAMS_STOP = 1; // stop order (has to have stop price set)
    ORDER_PARAMS_AON = 2; // all-or-nothing - complete fill or cancel
    ORDER_PARAMS_IOC = 3; // immediate-or-cancel - immediately fill what you can, cancel the rest
    ORDER_PARAMS_FOK = 4; // immediately try to fill the whole order
    ORDER_PARAMS_GTC = 5; // good-till-cancelled -  keep order active until manually cancelled
    ORDER_PARAMS_GFD = 6; // good-for-day keep order active until the end of the trading day
    ORDER_PARAMS_GTD = 7; // good-till-date - keep order active until the provided date (including the date)
}

// OrderKind is enum the order kind
enum OrderKind{
    ORDER_KIND_UNKNOWN = 0;
    ORDER_KIND_MARKET = 1;
    ORDER_KIND_LIMIT = 2;
}

// OrderSide is enum of the side
enum OrderSide{
    ORDER_SIDE_UNKNOWN = 0;
    ORDER_SIDE_BUY = 1;
    ORDER_SIDE_SELL = 2;
}

// Order define order entity
message Order{
    string ID = 1;

    OrderKind Kind = 2;

    Price Price = 3;

    Price StopPrice = 4;

    int64 CreatedAtMilli = 5;

    int64 Quantity = 6;

    int64 FilledQuantity = 7;

    OrderParams Params = 8;
}

// Price is value object of price
message Price{
    int64 Coefficient = 1;

    int32 Exponent = 2;
}

// SubmitOrderRequest define SubmitOrder request
message SubmitOrderRequest {
    string Symbol = 1;

    string CustomerID = 2;

    int64 Quantity = 3;

    Price Price = 4;

    Price StopPrice = 5;

    OrderKind Kind = 6;

    OrderSide Side = 7;

    OrderParams Params = 8;
}

// SubmitOrderReply define SubmitOrder reply
message SubmitOrderReply{
    string OrderID = 1;

    // the order create at milliseconds
    int64 CreatedAtMilli = 2;
}

// ListAllAsksRequest define list all asks of request
message ListAllAsksRequest{
    string Symbol = 1;
}

// ListAllAskReply define list all asks of reply
message ListAllAskReply{
    repeated Order Orders = 1;
}

// ListAllBidsRequest define list all bids of request
message ListAllBidsRequest{
    string Symbol = 1;
}

// ListAllBidsReply  define list all bids of reply
message ListAllBidsReply{
    repeated Order Orders = 1;
}

