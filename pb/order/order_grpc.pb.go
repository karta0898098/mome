// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: order/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderMatchingServiceClient is the client API for OrderMatchingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderMatchingServiceClient interface {
	SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderReply, error)
}

type orderMatchingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderMatchingServiceClient(cc grpc.ClientConnInterface) OrderMatchingServiceClient {
	return &orderMatchingServiceClient{cc}
}

func (c *orderMatchingServiceClient) SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderReply, error) {
	out := new(SubmitOrderReply)
	err := c.cc.Invoke(ctx, "/order.OrderMatchingService/SubmitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderMatchingServiceServer is the server API for OrderMatchingService service.
// All implementations should embed UnimplementedOrderMatchingServiceServer
// for forward compatibility
type OrderMatchingServiceServer interface {
	SubmitOrder(context.Context, *SubmitOrderRequest) (*SubmitOrderReply, error)
}

// UnimplementedOrderMatchingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrderMatchingServiceServer struct {
}

func (UnimplementedOrderMatchingServiceServer) SubmitOrder(context.Context, *SubmitOrderRequest) (*SubmitOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOrder not implemented")
}

// UnsafeOrderMatchingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderMatchingServiceServer will
// result in compilation errors.
type UnsafeOrderMatchingServiceServer interface {
	mustEmbedUnimplementedOrderMatchingServiceServer()
}

func RegisterOrderMatchingServiceServer(s grpc.ServiceRegistrar, srv OrderMatchingServiceServer) {
	s.RegisterService(&OrderMatchingService_ServiceDesc, srv)
}

func _OrderMatchingService_SubmitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderMatchingServiceServer).SubmitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderMatchingService/SubmitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderMatchingServiceServer).SubmitOrder(ctx, req.(*SubmitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderMatchingService_ServiceDesc is the grpc.ServiceDesc for OrderMatchingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderMatchingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderMatchingService",
	HandlerType: (*OrderMatchingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitOrder",
			Handler:    _OrderMatchingService_SubmitOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}
